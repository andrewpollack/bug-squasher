{"ast":null,"code":"var _jsxFileName = \"/Users/andrewpk/Desktop/newProj/bug-squasher/client/src/components/TaskList/TaskList.js\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"./TaskList.css\";\naxios.defaults.withCredentials = true;\n/* \nconst Task = props => (\n    <tr>\n        <td className={props.task.taskComplete ? \"completed\" : \"\"}>{props.task.taskDescription}</td>\n        <td className={props.task.taskComplete ? \"completed\" : \"\"}>{props.task.taskResponsible}</td>\n        <td className={props.task.taskComplete ? \"completed\" : \"\"}>{props.task.taskPriority}</td>\n        <td>\n            <Link to={\"/edit/\" + props.task._id}>Edit</Link>\n        </td>\n    </tr>\n)*/\n\nexport default class TaskList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: [],\n      loaded: false\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    axios.get(\"http://localhost:4000/bsDb/task/list\").then(response => {\n      if (this._isMounted) {\n        this.setState({\n          tasks: response.data,\n          loaded: true\n        });\n      }\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state !== prevState) {\n      axios.get(\"http://localhost:4000/bsDb/task/list\").then(response => {\n        if (this._isMounted) {\n          this.setState({\n            tasks: response.data\n          });\n        }\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }\n\n  getTaskList() {\n    var priorities = [\"High\", \"Medium\", \"Low\"];\n    var endOut = [];\n\n    for (var j = 0; j < priorities.length; j++) {\n      for (var i = 0; i < this.state.tasks.length; i++) {\n        var currTask = this.state.tasks[i];\n\n        if (currTask.taskPriority === priorities[j]) {\n          endOut.push(React.createElement(\"tr\", {\n            className: priorities[j],\n            key: this.state.tasks[i]._id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 77\n            },\n            __self: this\n          }, React.createElement(\"td\", {\n            className: currTask.taskComplete ? \"completed\" : \"\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 80\n            },\n            __self: this\n          }, currTask.taskDescription), React.createElement(\"td\", {\n            className: currTask.taskComplete ? \"completed\" : \"\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 82\n            },\n            __self: this\n          }, currTask.taskResponsible), React.createElement(\"td\", {\n            className: currTask.taskComplete ? \"completed\" : \"\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 83\n            },\n            __self: this\n          }, currTask.taskPriority), React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84\n            },\n            __self: this\n          }, React.createElement(Link, {\n            to: \"/edit/\" + currTask._id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 85\n            },\n            __self: this\n          }, \"Edit\"))));\n        }\n      }\n    }\n\n    if (this.state.loaded && endOut.length === 0) {\n      endOut.push(React.createElement(\"tr\", {\n        key: \"No tasks here\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"You're all caught up!  Click \\\"Create Tasks\\\" at the top to make more!\")));\n    }\n\n    return endOut; //return this.state.tasks.map(function(currTask, i) {\n    //   return <Task task={currTask} key={i} />\n    //});\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        marginTop: 15\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Task List\"), React.createElement(\"table\", {\n      className: \"table\",\n      style: {\n        marginTop: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Description\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Responsible\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Priority\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Actions\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, this.getTaskList())));\n  }\n\n}","map":{"version":3,"sources":["/Users/andrewpk/Desktop/newProj/bug-squasher/client/src/components/TaskList/TaskList.js"],"names":["React","Link","axios","defaults","withCredentials","TaskList","Component","constructor","props","state","tasks","loaded","componentDidMount","_isMounted","get","then","response","setState","data","catch","error","console","log","componentWillUnmount","componentDidUpdate","prevProps","prevState","getTaskList","priorities","endOut","j","length","i","currTask","taskPriority","push","_id","taskComplete","taskDescription","taskResponsible","render","marginTop"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"./TaskList.css\"\naxios.defaults.withCredentials = true;\n\n/* \nconst Task = props => (\n    <tr>\n        <td className={props.task.taskComplete ? \"completed\" : \"\"}>{props.task.taskDescription}</td>\n        <td className={props.task.taskComplete ? \"completed\" : \"\"}>{props.task.taskResponsible}</td>\n        <td className={props.task.taskComplete ? \"completed\" : \"\"}>{props.task.taskPriority}</td>\n        <td>\n            <Link to={\"/edit/\" + props.task._id}>Edit</Link>\n        </td>\n    </tr>\n)*/\n\nexport default class TaskList extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            tasks: [],\n            loaded: false\n        };\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        axios.get(\"http://localhost:4000/bsDb/task/list\")\n            .then(response => {\n                if (this._isMounted) {\n                    this.setState({\n                        tasks: response.data,\n                        loaded: true \n                    });\n                }\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n      }\n\n    \n    componentDidUpdate(prevProps, prevState) {\n        if(this.state !== prevState) {\n            axios.get(\"http://localhost:4000/bsDb/task/list\")\n                .then(response => {\n                    if (this._isMounted) {\n                        this.setState({\n                            tasks: response.data\n                        });\n                    }\n                })\n                .catch(function (error) {\n                    console.log(error);\n                })\n            }\n    }\n\n    getTaskList() {\n        var priorities = [\"High\", \"Medium\", \"Low\"];\n        var endOut = [];\n        \n        for (var j = 0; j < priorities.length; j++ ) {\n            for (var i = 0; i < this.state.tasks.length; i++) {\n                var currTask = this.state.tasks[i];\n                if(currTask.taskPriority === priorities[j]) {\n                    endOut.push(\n                        <tr className={priorities[j]} \n                            key={this.state.tasks[i]._id}\n                            >\n                            <td className={currTask.taskComplete ? \"completed\" : \"\"}\n                            >{currTask.taskDescription}</td>\n                            <td className={currTask.taskComplete ? \"completed\" : \"\"}>{currTask.taskResponsible}</td>\n                            <td className={currTask.taskComplete ? \"completed\" : \"\"}>{currTask.taskPriority}</td>\n                            <td>\n                                <Link to={\"/edit/\" + currTask._id}>Edit</Link>\n                            </td>\n                        </tr>\n                    );\n                }\n            }\n        }\n        if(this.state.loaded && endOut.length === 0) {\n            endOut.push(\n                <tr key=\"No tasks here\">\n                    <td>\n                        You're all caught up!  Click \"Create Tasks\" at the top to make more!\n                    </td>\n                </tr>\n            );\n        }\n        return endOut;\n\n        //return this.state.tasks.map(function(currTask, i) {\n        //   return <Task task={currTask} key={i} />\n        //});\n    }\n\n    render() {\n        return (\n            <div style={{marginTop: 15}}>\n                <h3>Task List</h3>\n                <table className=\"table\" style={{ marginTop: 20}}>\n                    <thead>\n                        <tr>\n                            <th>Description</th>\n                            <th>Responsible</th>\n                            <th>Priority</th>\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        { this.getTaskList() }\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}