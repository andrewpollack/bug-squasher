{"version":3,"sources":["imgs/logo.png","components/TaskList/TaskList.js","components/EditTask/EditTask.js","components/CreateTask/CreateTask.js","components/CreateUser/CreateUser.js","components/UserLogin/UserLogin.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","axios","defaults","withCredentials","TaskList","props","state","tasks","loaded","this","_isMounted","get","then","response","setState","data","catch","error","console","log","prevProps","prevState","priorities","endOut","j","length","i","currTask","taskPriority","push","className","key","_id","taskComplete","taskDescription","taskResponsible","to","style","marginTop","getTaskList","React","Component","EditTask","onChangeTaskDescription","bind","onChangeTaskResponsible","onChangeTaskPriority","onChangeTaskCompleted","onSubmit","deleteTask","e","preventDefault","delete","match","params","id","res","history","trim","updatedTask","post","taskRecentlyAdded","taskSubFailed","target","value","type","name","checked","onChange","getPriorityListOptions","htmlFor","onClick","deleteClick","CreateTask","newTask","role","addResponseForSubmission","CreateUser","onChangeUserFirstName","onChangeUserLastName","onChangeUserUsername","onChangeUserPassword","onChangeUserConfirmPassword","goToLoginUser","changeLogin","userFirstName","userLastName","userUsername","userPassword","userConfirmPassword","userTeams","userAdmins","userRecentlyAdded","userSubFailed","passwordsNotMatch","userNameTaken","clearPopups","newUser","user","loginSuccess","changeLoginState","LoginUser","goToCreateUser","userLoginFailed","loginUser","result","err","MainPage","loginId","loginUsername","updateLoginState","logoutUser","newLogin","username","href","src","logo","width","height","alt","path","exact","render","App","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.53b2008d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0b28c7ea.png\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"./TaskList.css\"\naxios.defaults.withCredentials = true;\n\n/* \nconst Task = props => (\n    <tr>\n        <td className={props.task.taskComplete ? \"completed\" : \"\"}>{props.task.taskDescription}</td>\n        <td className={props.task.taskComplete ? \"completed\" : \"\"}>{props.task.taskResponsible}</td>\n        <td className={props.task.taskComplete ? \"completed\" : \"\"}>{props.task.taskPriority}</td>\n        <td>\n            <Link to={\"/edit/\" + props.task._id}>Edit</Link>\n        </td>\n    </tr>\n)*/\n\nexport default class TaskList extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            tasks: [],\n            loaded: false\n        };\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        axios.get(\"http://localhost:4000/bsDb/task/list\")\n            .then(response => {\n                if (this._isMounted) {\n                    this.setState({\n                        tasks: response.data,\n                        loaded: true \n                    });\n                }\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n      }\n\n    \n    componentDidUpdate(prevProps, prevState) {\n        if(this.state !== prevState) {\n            axios.get(\"http://localhost:4000/bsDb/task/list\")\n                .then(response => {\n                    if (this._isMounted) {\n                        this.setState({\n                            tasks: response.data\n                        });\n                    }\n                })\n                .catch(function (error) {\n                    console.log(error);\n                })\n            }\n    }\n\n    getTaskList() {\n        var priorities = [\"High\", \"Medium\", \"Low\"];\n        var endOut = [];\n        \n        for (var j = 0; j < priorities.length; j++ ) {\n            for (var i = 0; i < this.state.tasks.length; i++) {\n                var currTask = this.state.tasks[i];\n                if(currTask.taskPriority === priorities[j]) {\n                    endOut.push(\n                        <tr className={priorities[j]} \n                            key={this.state.tasks[i]._id}\n                            >\n                            <td className={currTask.taskComplete ? \"completed\" : \"\"}\n                            >{currTask.taskDescription}</td>\n                            <td className={currTask.taskComplete ? \"completed\" : \"\"}>{currTask.taskResponsible}</td>\n                            <td className={currTask.taskComplete ? \"completed\" : \"\"}>{currTask.taskPriority}</td>\n                            <td>\n                                <Link to={\"/edit/\" + currTask._id}>Edit</Link>\n                            </td>\n                        </tr>\n                    );\n                }\n            }\n        }\n        if(this.state.loaded && endOut.length === 0) {\n            endOut.push(\n                <tr key=\"No tasks here\">\n                    <td>\n                        You're all caught up!  Click \"Create Tasks\" at the top to make more!\n                    </td>\n                </tr>\n            );\n        }\n        return endOut;\n\n        //return this.state.tasks.map(function(currTask, i) {\n        //   return <Task task={currTask} key={i} />\n        //});\n    }\n\n    render() {\n        return (\n            <div style={{marginTop: 15}}>\n                <h3>Task List</h3>\n                <table className=\"table\" style={{ marginTop: 20}}>\n                    <thead>\n                        <tr>\n                            <th>Description</th>\n                            <th>Responsible</th>\n                            <th>Priority</th>\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        { this.getTaskList() }\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport axios from \"axios\";\naxios.defaults.withCredentials = true;\n\nexport default class EditTask extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.onChangeTaskDescription = this.onChangeTaskDescription.bind(this);\n        this.onChangeTaskResponsible = this.onChangeTaskResponsible.bind(this);\n        this.onChangeTaskPriority = this.onChangeTaskPriority.bind(this);\n        this.onChangeTaskCompleted = this.onChangeTaskCompleted.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n\n        this.state = {\n            taskDescription: '',\n            taskResponsible: '',\n            taskPriority: '',\n            taskComplete: false,\n            deleteTask: false,\n        }\n        \n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n\n        if(this.state.deleteTask) {\n            axios.delete('http://localhost:4000/bsDb/task/delete/'+this.props.match.params.id)\n            .then(res => {\n                //console.log(res.data)\n                this.props.history.push('/');  \n                return;\n            });     \n        }\n\n        if(!this.state.taskDescription.trim().length ||\n           !this.state.taskResponsible.trim().length) {\n            this.setState( {\n                taskRecentlyAdded: false,\n                taskSubFailed: true\n            });\n            return;\n        }\n\n        const updatedTask = {\n            taskDescription: this.state.taskDescription,\n            taskResponsible: this.state.taskResponsible,\n            taskPriority: this.state.taskPriority,\n            taskComplete: this.state.taskComplete\n        };\n        axios.post('http://localhost:4000/bsDb/task/update/'+this.props.match.params.id, updatedTask)\n            .then( res =>  {\n                //console.log(res.data);\n                this.props.history.push('/'); \n                return;       \n            });     \n    }\n\n    componentDidMount() {\n        axios.get('http://localhost:4000/bsDb/task/' + this.props.match.params.id)\n            .then(response => {\n                this.setState( {\n                    taskDescription: response.data.taskDescription,\n                    taskResponsible: response.data.taskResponsible,\n                    taskPriority: response.data.taskPriority,\n                    taskComplete: response.data.taskComplete,\n                })\n            })\n            .catch(function(error) {\n                console.log(error);\n            });\n    }\n\n    onChangeTaskDescription(e) {\n        this.setState({\n            taskDescription: e.target.value,\n        });\n    }\n\n    onChangeTaskResponsible(e) {\n        this.setState({\n            taskResponsible: e.target.value,\n        });\n    }\n\n    onChangeTaskPriority(e) {\n        this.setState({\n            taskPriority: e.target.value,\n        });\n    }\n\n    onChangeTaskCompleted(e) {\n        this.setState({\n            taskComplete: !this.state.taskComplete,\n        });\n    }\n\n    deleteClick() {\n        this.setState({\n            deleteTask: true,\n        });\n    }\n\n    /**\n     * Returns a form-check-input object for each of the possible priorities for the tasks.\n     */\n    getPriorityListOptions() {\n        var priorities = [\"Low\", \"Medium\", \"High\"];\n        var endOut = [];\n        \n        for (var i = 0; i < priorities.length; i++) {\n            endOut.push(\n                <div key={priorities[i]} className=\"form-check form-check-inline\">\n                    <input className=\"form-check-input\"\n                            type=\"radio\"\n                            name=\"priorityOptions\"\n                            id={\"priority\" + priorities[i]}\n                            value={priorities[i]}\n                            checked={this.state.taskPriority === priorities[i]}\n                            onChange={this.onChangeTaskPriority}\n                            />\n                    <label className=\"form-check-label\">{priorities[i]}</label>\n                </div>\n            );\n        }\n        return endOut;\n    }\n\n    render() {\n        return (\n            <div>\n                <h3>Update Task:</h3>\n                <form onSubmit={this.onSubmit}>\n                    <div className=\"form-group\">\n                        <label>Description: </label>\n                        <input type=\"text\"\n                               className=\"form-control\"\n                               value={this.state.taskDescription}\n                               onChange={this.onChangeTaskDescription}\n                               />\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Description: </label>\n                        <input type=\"text\"\n                               className=\"form-control\"\n                               value={this.state.taskResponsible}\n                               onChange={this.onChangeTaskResponsible}\n                               />\n                    </div>\n                    <div className=\"form-group\">\n                        {this.getPriorityListOptions()}\n                    </div>\n                    <div className=\"form-check\">\n                        <input type=\"checkbox\"\n                               className=\"form-check-input\"\n                               id=\"completedCheckbox\"\n                               name=\"completedCheckbox\"\n                               onChange={this.onChangeTaskCompleted}\n                               checked={this.state.taskComplete}\n                               value={this.state.taskComplete}\n                               />\n                        <label className=\"form-check-label\" htmlFor=\"completedCheckbox\">\n                            Completed\n                        </label>\n                    </div>\n                    <br />\n                    <div className=\"form-row\">\n                        <div className=\"col-auto\">\n                            <input type=\"submit\" value=\"Update Task\" className=\"btn btn-primary\" />\n                        </div>\n                        <div className=\"col-auto\">\n                            <input type=\"submit\" value=\"Delete Task\" className=\"btn btn-danger\" onClick={this.deleteClick.bind(this)} />\n                        </div>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport axios from \"axios\";\naxios.defaults.withCredentials = true;\n\nexport default class CreateTask extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.onChangeTaskDescription = this.onChangeTaskDescription.bind(this);\n        this.onChangeTaskResponsible = this.onChangeTaskResponsible.bind(this);\n        this.onChangeTaskPriority = this.onChangeTaskPriority.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n\n        this.state = {\n            taskDescription: '',\n            taskResponsible: '',\n            taskPriority: 'Low',\n            taskComplete: false,\n            taskRecentlyAdded: false,\n            taskSubFailed: false\n        }\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n\n        if(!this.state.taskDescription.trim().length ||\n           !this.state.taskResponsible.trim().length) {\n            this.setState( {\n                taskRecentlyAdded: false,\n                taskSubFailed: true\n            });\n            return;\n        }\n\n        const newTask = {\n            taskDescription: this.state.taskDescription,\n            taskResponsible: this.state.taskResponsible,\n            taskPriority: this.state.taskPriority,\n            taskComplete: this.state.taskComplete\n        };\n        axios.post('http://localhost:4000/bsDb/task/add', newTask)\n            .then(\n                res => {\n                    this.setState( {\n                        taskDescription: '',\n                        taskResponsible: '',\n                        taskPriority: 'Low',\n                        taskComplete: false,\n                        taskRecentlyAdded: true,\n                        taskSubFailed: false\n                    });\n            });\n    }\n\n    onChangeTaskDescription(e) {\n        this.setState({\n            taskDescription: e.target.value,\n            taskRecentlyAdded: false,\n            taskSubFailed: false\n        });\n    }\n\n    onChangeTaskResponsible(e) {\n        this.setState({\n            taskResponsible: e.target.value,\n            taskRecentlyAdded: false,\n            taskSubFailed: false\n        });\n    }\n\n    onChangeTaskPriority(e) {\n        this.setState({\n            taskPriority: e.target.value,\n            taskRecentlyAdded: false,\n            taskSubFailed: false\n        });\n    }\n\n    /**\n     * Gives feedback if a task has been recently added/refused\n     */\n    addResponseForSubmission() {\n       if(this.state.taskRecentlyAdded) {\n           return (\n            <div className=\"alert alert-success\" role=\"alert\">\n                Task successfully submitted!\n            </div>\n           );\n       }\n       else if(this.state.taskSubFailed) {\n           return (\n           <div className=\"alert alert-danger\" role=\"alert\">\n                Submission failed.  Please leave no boxes blank.\n            </div>\n            );\n       }\n       else {\n           return;\n       }        \n    }\n\n    /**\n     * Returns a form-check-input object for each of the possible priorities for the tasks.\n     */\n    getPriorityListOptions() {\n        var priorities = [\"Low\", \"Medium\", \"High\"];\n        var endOut = [];\n        \n        for (var i = 0; i < priorities.length; i++) {\n            endOut.push(\n                <div key={priorities[i]} className=\"form-check form-check-inline\">\n                    <input className=\"form-check-input\"\n                            type=\"radio\"\n                            name=\"priorityOptions\"\n                            id={\"priority\" + priorities[i]}\n                            value={priorities[i]}\n                            checked={this.state.taskPriority === priorities[i]}\n                            onChange={this.onChangeTaskPriority}\n                            />\n                    <label className=\"form-check-label\">{priorities[i]}</label>\n                </div>\n            );\n        }\n        return endOut;\n    }\n\n    render() {\n        return (\n            <div style={{marginTop: 15}}>\n                <h3>Create New Task</h3>\n                <form onSubmit={this.onSubmit}>\n                    <div className=\"form-group\">\n                        <label>Description: </label>\n                        <input  type=\"text\"\n                                className=\"form-control\"\n                                value={this.state.taskDescription}\n                                onChange={this.onChangeTaskDescription} \n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Responsible: </label>\n                        <input  type=\"text\"\n                                className=\"form-control\"\n                                value={this.state.taskResponsible}\n                                onChange={this.onChangeTaskResponsible} \n                                />\n                    </div>\n                    <div className=\"form-group\">\n                        {this.getPriorityListOptions()}\n                    </div>\n                    <div className=\"form-group\">\n                        <input type=\"submit\" value=\"Create Task\" className=\"btn btn-primary\" />\n                    </div>\n                    {this.addResponseForSubmission()}\n                </form>\n\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport axios from \"axios\";\nimport \"./CreateUser.css\";\naxios.defaults.withCredentials = true;\n\n\nexport default class CreateUser extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.onChangeUserFirstName = this.onChangeUserFirstName.bind(this);\n        this.onChangeUserLastName = this.onChangeUserLastName.bind(this);\n        this.onChangeUserUsername = this.onChangeUserUsername.bind(this);\n        this.onChangeUserPassword = this.onChangeUserPassword.bind(this);\n        this.onChangeUserConfirmPassword = this.onChangeUserConfirmPassword.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n        this.goToLoginUser = this.goToLoginUser.bind(this);\n        this.changeLogin = this.changeLogin.bind(this);\n\n        this.state = {\n            userFirstName: '',\n            userLastName: '',\n            userUsername: '',\n            userPassword: '',\n            userConfirmPassword: '',\n            userTeams: [],\n            userAdmins: [],\n            userRecentlyAdded: false,\n            userSubFailed: false,\n            passwordsNotMatch: false,\n            userNameTaken: false,\n        }\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n\n        if(!this.state.userFirstName.trim().length ||\n           !this.state.userLastName.trim().length ||\n           !this.state.userUsername.trim().length ||\n           !this.state.userPassword.trim().length) {\n            this.clearPopups();\n            this.setState( {\n                userSubFailed: true,\n            });\n            return;\n        }\n\n        if(!(this.state.userPassword === this.state.userConfirmPassword)) {\n            this.clearPopups();\n            this.setState( {\n                passwordsNotMatch: true\n            });\n            return;\n        }\n\n        const newUser = {\n            userFirstName: this.state.userFirstName,\n            userLastName: this.state.userLastName,\n            userUsername: this.state.userUsername,\n            userPassword: this.state.userPassword,\n            userTeams: this.state.userTeams,\n            userAdmins: this.state.userAdmins\n        };\n\n        axios.post('http://localhost:4000/bsDb/user/add', newUser)\n            .then(res => {\n                if(res.data.user === \"Username Taken\") {\n                    this.setState( {\n                        userNameTaken: true\n                    });\n                    return;\n                }\n                else {\n                    this.changeLogin(res.data);\n                    console.log(\"Successful login\");\n                    this.props.history.push('/'); \n                    return;\n                }\n            });\n    }\n\n    changeLogin(loginSuccess) {\n        this.props.changeLoginState(loginSuccess);\n    }\n\n\n    goToLoginUser(e) {\n        this.props.history.push('/userLogin'); \n    }\n\n    clearPopups() {\n        this.setState({\n            userRecentlyAdded: false,\n            userSubFailed: false,\n            passwordsNotMatch: false,\n            userNameTaken: false\n        })\n    }\n\n    onChangeUserFirstName(e) {\n        this.clearPopups();\n        this.setState({\n            userFirstName: e.target.value,\n        });\n    }\n\n    onChangeUserLastName(e) {\n        this.clearPopups();\n        this.setState({\n            userLastName: e.target.value,\n        });\n\n    }\n\n    onChangeUserUsername(e) {\n        this.clearPopups();\n        this.setState({\n            userUsername: e.target.value,\n        });\n    }\n\n    onChangeUserPassword(e) {\n        this.clearPopups();\n        this.setState({\n            userPassword: e.target.value,\n        });\n    }\n\n    onChangeUserConfirmPassword(e) {\n        this.clearPopups();\n        this.setState({\n            userConfirmPassword: e.target.value,\n        });\n    }\n\n    /**\n     * Gives feedback if a user has been recently added/refused\n     */\n    addResponseForSubmission() {\n        if(this.state.userRecentlyAdded) {\n            return (\n             <div className=\"alert alert-success form-group\" role=\"alert\">\n                 User successfully created!\n             </div>\n            );\n        }\n        else if(this.state.userSubFailed) {\n            return (\n            <div className=\"alert alert-danger form-group\" role=\"alert\">\n                 Submission failed.  Please leave no boxes blank.\n             </div>\n             );\n        }\n        else if(this.state.passwordsNotMatch) {\n            return (\n            <div className=\"alert alert-danger form-group\" role=\"alert\">\n                 Submission failed.  Passwords do not match.\n             </div>\n             );\n        }\n        else if(this.state.userNameTaken) {\n            return (\n            <div className=\"alert alert-danger form-group\" role=\"alert\">\n                 Submission failed.  Username taken.\n             </div>\n             );\n        }\n        else {\n            return;\n        }        \n     }\n\n    render() {\n        return(\n            <div style={{marginTop: 15}}>\n                <h3>Create New Account</h3>\n                <form onSubmit={this.onSubmit}>\n                    <div className=\"form-group\">\n                        <label>First Name: </label>\n                        <input  type=\"text\"\n                                className=\"form-control\"\n                                value={this.state.userFirstName}\n                                onChange={this.onChangeUserFirstName} \n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Last Name: </label>\n                        <input  type=\"text\"\n                                className=\"form-control\"\n                                value={this.state.userLastName}\n                                onChange={this.onChangeUserLastName} \n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label className = {this.state.userNameTaken ? \"errorLit\" : \"\"}>Username: </label>\n                        <input  type=\"text\"\n                                className=\"form-control\"\n                                value={this.state.userUsername}\n                                onChange={this.onChangeUserUsername} \n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label className = {this.state.passwordsNotMatch ? \"errorLit\" : \"\"}>Password: </label>\n                        <input  type=\"password\"\n                                className=\"form-control\"\n                                value={this.state.userPassword}\n                                onChange={this.onChangeUserPassword} \n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label className = {this.state.passwordsNotMatch ? \"errorLit\" : \"\"} >Confirm Password: </label>\n                        <input  type=\"password\"\n                                className=\"form-control\"\n                                value={this.state.userConfirmPassword}\n                                onChange={this.onChangeUserConfirmPassword} \n                        />\n                    </div>\n                    <div className=\"form-inline form-group\">\n                        <input type=\"submit\" value=\"Create Account\" className=\"btn btn-primary\" />\n                        {this.addResponseForSubmission()}\n                    </div>\n                </form>\n                <form onSubmit={this.goToLoginUser}>\n                    <div className=\"form-group\">\n                        <input type=\"submit\" value=\"Back to Login\" className=\"btn btn-secondary\" />\n                    </div>\n                </form>\n            </div>\n        );\n    }\n\n\n}","import React from \"react\";\nimport axios from \"axios\";\naxios.defaults.withCredentials = true;\n\nexport default class LoginUser extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.onChangeUserUsername = this.onChangeUserUsername.bind(this);\n        this.onChangeUserPassword = this.onChangeUserPassword.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n        this.goToCreateUser = this.goToCreateUser.bind(this);\n        this.changeLogin = this.changeLogin.bind(this);\n\n        this.state = {\n            userUsername: '',\n            userPassword: '',\n            userLoginFailed: false,\n            userSubFailed: false,\n        }\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n\n        if(!this.state.userUsername.trim().length ||\n           !this.state.userPassword.trim().length) {\n            this.clearPopups();\n            this.setState( {\n                userSubFailed: true,\n            });\n            return;\n        }\n\n        const loginUser = {\n            userUsername: this.state.userUsername,\n            userPassword: this.state.userPassword,\n        };\n\n        axios.post('http://localhost:4000/bsDb/admin/login', loginUser)\n            .then(res => {\n                if(res.data.result === \"Username Not Found\") {\n                    this.setState( {\n                        userLoginFailed: true\n                    });\n                    return;\n                }\n                else if(res.data.result === \"Password Incorrect\") {\n                    this.setState( {\n                        userLoginFailed: true\n                    });\n                    return;\n                }\n                else {\n                    this.changeLogin(res.data);\n                    console.log(\"Successful login\");\n                    this.props.history.push('/'); \n                    return;\n                }\n            })\n            .catch(err => {\n                console.log(err);\n            });\n\n    }\n\n    goToCreateUser(e) {\n        this.props.history.push('/createUser'); \n    }\n\n    clearPopups() {\n        this.setState({\n            userLoginFailed: false,\n            userSubFailed: false,\n        })\n    }\n\n    changeLogin(loginSuccess) {\n        this.props.changeLoginState(loginSuccess);\n    }\n\n    onChangeUserUsername(e) {\n        this.clearPopups();\n        this.setState({\n            userUsername: e.target.value,\n        });\n    }\n\n    onChangeUserPassword(e) {\n        this.clearPopups();\n        this.setState({\n            userPassword: e.target.value,\n        });\n    }\n\n    /**\n     * Gives feedback if a user has been recently added/refused\n     */\n    addResponseForSubmission() {\n        if(this.state.userLoginFailed) {\n            return (\n                <div className=\"alert alert-danger form-group\" role=\"alert\">\n                    Login failed.  Invalid username/password.\n                </div>\n            );\n        }\n        else if(this.state.userSubFailed) {\n            return (\n                <div className=\"alert alert-danger form-group\" role=\"alert\">\n                     Login failed.  Please leave no boxes blank.\n                 </div>\n            );\n        }\n        else {\n            return;\n        }        \n     }\n\n    render() {\n        return(\n            <div style={{marginTop: 15}}>\n                <h3>Login</h3>\n                <form onSubmit={this.onSubmit}>\n                    <div className=\"form-group\">\n                        <label className = {this.state.userNameTaken ? \"errorLit\" : \"\"}>Username: </label>\n                        <input  type=\"text\"\n                                className=\"form-control\"\n                                value={this.state.userUsername}\n                                onChange={this.onChangeUserUsername} \n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label className = {this.state.passwordsNotMatch ? \"errorLit\" : \"\"}>Password: </label>\n                        <input  type=\"password\"\n                                className=\"form-control\"\n                                value={this.state.userPassword}\n                                onChange={this.onChangeUserPassword} \n                        />\n                    </div>\n                    <div className=\"form-inline form-group\">\n                        <input type=\"submit\" value=\"Login\" className=\"btn btn-primary\" />\n                        {this.addResponseForSubmission()}\n                    </div>\n                </form>\n                <form onSubmit={this.goToCreateUser}>\n                    <div className=\"form-group\">\n                        <input type=\"submit\" value=\"Create New Account\" className=\"btn btn-secondary\" />\n                    </div>\n                </form>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { BrowserRouter as Router, Route, Link, Redirect } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport logo from \"./imgs/logo.png\"\nimport TaskList from \"./components/TaskList/TaskList\"\nimport EditTask from \"./components/EditTask/EditTask\"\nimport CreateTask from \"./components/CreateTask/CreateTask\"\nimport CreateUser from \"./components/CreateUser/CreateUser\"\nimport UserLogin from \"./components/UserLogin/UserLogin\"\n\nimport axios from \"axios\";\n\n\nclass MainPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loginId: \"\",\n      loginUsername: \"\",\n    };\n\n    this.updateLoginState = this.updateLoginState.bind(this);\n    this.logoutUser = this.logoutUser.bind(this);\n  }\n\n  updateLoginState(newLogin) {\n    this.setState({\n      loginId: newLogin._id,\n      loginUsername: newLogin.username\n    });\n  }\n\n  logoutUser(e) {\n    e.preventDefault();\n\n    const loginUser = {\n      loginId: this.state.loginId,\n    };\n\n    axios.post(\"http://localhost:4000/bsDb/admin/logout\", loginUser)\n    .then(response => {\n      if(response) {\n        this.setState({\n          loginId: \"\",\n          loginUsername: \"\"\n        });\n        return;\n      }\n    }).catch(() => {\n      console.log(\"error\");\n    });\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"container\">\n          <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\n            <a className=\"navbar-brand\" href=\"/\">\n              <img src={logo} width=\"40\" height=\"40\" alt=\"Squash Those Bugs!\" />\n            </a>\n            <Link to=\"/\" className=\"navbar-brand\">Bug Squasher</Link>\n            <div className=\"collapse navbar-collapse\">\n              { this.state.loginId ? \n              <ul className=\"navbar-nav mr-auto\">\n                <li className=\"navbar-item\">\n                  <Link to=\"/\" className=\"nav-link\">Tasks</Link>\n                </li>\n                <li className=\"navbar-item\">\n                  <Link to=\"/createTask\" className=\"nav-link\">Create Task</Link>\n                </li>\n              </ul> :\n                <ul className=\"navbar-nav mr-auto\" />\n              }\n\n                {\n                this.state.loginId ? \n                <form className=\"form-inline my-2 my-lg-0\" onSubmit={this.logoutUser}>\n                  <ul className=\"navbar-nav  nav-pills\">\n                    <li className=\"navbar-item\">\n                      <span className=\"navbar-text\">Username: \"{this.state.loginUsername}\" </span>\n                    </li>\n                    <button className=\"btn btn-link nav-link\"  type=\"submit\">Logout</button>\n                  </ul>\n                </form>\n                :\n                <ul className=\"navbar-nav\">\n                  <li className=\"navbar-item\">\n                    <Link to=\"/userLogin\" className=\"nav-link\">Login</Link>\n                  </li>\n                </ul>\n                }\n\n            </div>\n  \n          </nav>\n          <Route path=\"/\" exact>\n              {this.state.loginId ? <TaskList /> : <Redirect to=\"/userLogin\" />}\n          </Route> \n\n          <Route path=\"/edit/:id\"\n            render={props => <EditTask {...props} />}\n          /> \n          \n          <Route path=\"/createTask\">\n            {this.state.loginId ? <CreateTask /> : <Redirect to=\"/userLogin\" />}\n          </Route> \n          <Route path=\"/createUser\" \n                render={props => <CreateUser {...props} changeLoginState={this.updateLoginState} />}\n                />\n          <Route path=\"/userLogin\" \n                 render={props => <UserLogin {...props} changeLoginState={this.updateLoginState} />}\n                 />\n        </div>\n      </Router>\n      \n    );\n  }\n}\n\n\n\nfunction App() {\n\n  return (\n    <MainPage />\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}